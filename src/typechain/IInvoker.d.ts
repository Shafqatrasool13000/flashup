/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IInvokerInterface extends ethers.utils.Interface {
  functions: {
    "currentRepaymentAmount()": FunctionFragment;
    "currentSender()": FunctionFragment;
    "currentTokenAddress()": FunctionFragment;
    "currentTokenAmount()": FunctionFragment;
    "invoke(address,bytes,address,uint256)": FunctionFragment;
    "invokeCallback()": FunctionFragment;
    "isTokenAddressRegistered(address)": FunctionFragment;
    "platformReward()": FunctionFragment;
    "platformVaultAddress()": FunctionFragment;
    "poolReward()": FunctionFragment;
    "poolRewardAddress(address)": FunctionFragment;
    "totalLiquidity(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "currentRepaymentAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentTokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "invoke",
    values: [string, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "invokeCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAddressRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "platformReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolRewardAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLiquidity",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "currentRepaymentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invokeCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAddressRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolRewardAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidity",
    data: BytesLike
  ): Result;

  events: {};
}

export class IInvoker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IInvokerInterface;

  functions: {
    currentRepaymentAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentSender(overrides?: CallOverrides): Promise<[string]>;

    currentTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    currentTokenAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    invoke(
      invokeTo: string,
      invokeData: BytesLike,
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    invokeCallback(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTokenAddressRegistered(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    platformReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    platformVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    poolReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolRewardAddress(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalLiquidity(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  currentRepaymentAmount(overrides?: CallOverrides): Promise<BigNumber>;

  currentSender(overrides?: CallOverrides): Promise<string>;

  currentTokenAddress(overrides?: CallOverrides): Promise<string>;

  currentTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

  invoke(
    invokeTo: string,
    invokeData: BytesLike,
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  invokeCallback(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTokenAddressRegistered(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  platformReward(overrides?: CallOverrides): Promise<BigNumber>;

  platformVaultAddress(overrides?: CallOverrides): Promise<string>;

  poolReward(overrides?: CallOverrides): Promise<BigNumber>;

  poolRewardAddress(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  totalLiquidity(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    currentRepaymentAmount(overrides?: CallOverrides): Promise<BigNumber>;

    currentSender(overrides?: CallOverrides): Promise<string>;

    currentTokenAddress(overrides?: CallOverrides): Promise<string>;

    currentTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    invoke(
      invokeTo: string,
      invokeData: BytesLike,
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    invokeCallback(overrides?: CallOverrides): Promise<void>;

    isTokenAddressRegistered(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    platformReward(overrides?: CallOverrides): Promise<BigNumber>;

    platformVaultAddress(overrides?: CallOverrides): Promise<string>;

    poolReward(overrides?: CallOverrides): Promise<BigNumber>;

    poolRewardAddress(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    totalLiquidity(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    currentRepaymentAmount(overrides?: CallOverrides): Promise<BigNumber>;

    currentSender(overrides?: CallOverrides): Promise<BigNumber>;

    currentTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    currentTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    invoke(
      invokeTo: string,
      invokeData: BytesLike,
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    invokeCallback(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTokenAddressRegistered(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    platformReward(overrides?: CallOverrides): Promise<BigNumber>;

    platformVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    poolReward(overrides?: CallOverrides): Promise<BigNumber>;

    poolRewardAddress(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLiquidity(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    currentRepaymentAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentTokenAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invoke(
      invokeTo: string,
      invokeData: BytesLike,
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    invokeCallback(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTokenAddressRegistered(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    platformReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformVaultAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolRewardAddress(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLiquidity(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
