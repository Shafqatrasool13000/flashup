/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IBancorNetworkInterface extends ethers.utils.Interface {
  functions: {
    "cancelWithdrawal(uint256)": FunctionFragment;
    "collectionByPool(address)": FunctionFragment;
    "createPools(address[],address)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "depositFor(address,address,uint256)": FunctionFragment;
    "flashLoan(address,uint256,address,bytes)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initWithdrawal(address,uint256)": FunctionFragment;
    "liquidityPools()": FunctionFragment;
    "migrateLiquidity(address,address,uint256,uint256,uint256)": FunctionFragment;
    "migratePools(address[],address)": FunctionFragment;
    "poolCollections()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "tradeBySourceAmount(address,address,uint256,uint256,uint256,address)": FunctionFragment;
    "tradeByTargetAmount(address,address,uint256,uint256,uint256,address)": FunctionFragment;
    "version()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawNetworkFees(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionByPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createPools",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initWithdrawal",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateLiquidity",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migratePools",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolCollections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeBySourceAmount",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeByTargetAmount",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNetworkFees",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionByPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migratePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tradeBySourceAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeByTargetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNetworkFees",
    data: BytesLike
  ): Result;

  events: {
    "FlashLoanCompleted(address,address,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TokensWithdrawn(bytes32,address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "WithdrawalCompleted(bytes32,address,address,uint256,uint256,uint256,uint32)": EventFragment;
    "WithdrawalInitiated(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FlashLoanCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalInitiated"): EventFragment;
}

export type FlashLoanCompletedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    token: string;
    borrower: string;
    amount: BigNumber;
    feeAmount: BigNumber;
  }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type TokensWithdrawnEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    contextId: string;
    provider: string;
    token: string;
    baseTokenAmount: BigNumber;
    poolTokenAmount: BigNumber;
    externalProtectionBaseTokenAmount: BigNumber;
    bntAmount: BigNumber;
    withdrawalFeeAmount: BigNumber;
  }
>;

export type WithdrawalCompletedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, number] & {
    contextId: string;
    pool: string;
    provider: string;
    requestId: BigNumber;
    poolTokenAmount: BigNumber;
    reserveTokenAmount: BigNumber;
    timeElapsed: number;
  }
>;

export type WithdrawalInitiatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    pool: string;
    provider: string;
    requestId: BigNumber;
    poolTokenAmount: BigNumber;
    reserveTokenAmount: BigNumber;
  }
>;

export class IBancorNetwork extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBancorNetworkInterface;

  functions: {
    cancelWithdrawal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectionByPool(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createPools(
      tokens: string[],
      poolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositFor(
      provider: string,
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashLoan(
      token: string,
      amount: BigNumberish,
      recipient: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initWithdrawal(
      poolToken: string,
      poolTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityPools(overrides?: CallOverrides): Promise<[string[]]>;

    migrateLiquidity(
      token: string,
      provider: string,
      amount: BigNumberish,
      availableAmount: BigNumberish,
      originalAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migratePools(
      pools: string[],
      newPoolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolCollections(overrides?: CallOverrides): Promise<[string[]]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tradeBySourceAmount(
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      minReturnAmount: BigNumberish,
      deadline: BigNumberish,
      beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tradeByTargetAmount(
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      maxSourceAmount: BigNumberish,
      deadline: BigNumberish,
      beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[number]>;

    withdraw(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawNetworkFees(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelWithdrawal(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectionByPool(pool: string, overrides?: CallOverrides): Promise<string>;

  createPools(
    tokens: string[],
    poolCollection: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    pool: string,
    tokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositFor(
    provider: string,
    pool: string,
    tokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashLoan(
    token: string,
    amount: BigNumberish,
    recipient: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initWithdrawal(
    poolToken: string,
    poolTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityPools(overrides?: CallOverrides): Promise<string[]>;

  migrateLiquidity(
    token: string,
    provider: string,
    amount: BigNumberish,
    availableAmount: BigNumberish,
    originalAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migratePools(
    pools: string[],
    newPoolCollection: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolCollections(overrides?: CallOverrides): Promise<string[]>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tradeBySourceAmount(
    sourceToken: string,
    targetToken: string,
    sourceAmount: BigNumberish,
    minReturnAmount: BigNumberish,
    deadline: BigNumberish,
    beneficiary: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tradeByTargetAmount(
    sourceToken: string,
    targetToken: string,
    targetAmount: BigNumberish,
    maxSourceAmount: BigNumberish,
    deadline: BigNumberish,
    beneficiary: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<number>;

  withdraw(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawNetworkFees(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelWithdrawal(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectionByPool(pool: string, overrides?: CallOverrides): Promise<string>;

    createPools(
      tokens: string[],
      poolCollection: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFor(
      provider: string,
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashLoan(
      token: string,
      amount: BigNumberish,
      recipient: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initWithdrawal(
      poolToken: string,
      poolTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityPools(overrides?: CallOverrides): Promise<string[]>;

    migrateLiquidity(
      token: string,
      provider: string,
      amount: BigNumberish,
      availableAmount: BigNumberish,
      originalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    migratePools(
      pools: string[],
      newPoolCollection: string,
      overrides?: CallOverrides
    ): Promise<void>;

    poolCollections(overrides?: CallOverrides): Promise<string[]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tradeBySourceAmount(
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      minReturnAmount: BigNumberish,
      deadline: BigNumberish,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeByTargetAmount(
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      maxSourceAmount: BigNumberish,
      deadline: BigNumberish,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<number>;

    withdraw(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawNetworkFees(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "FlashLoanCompleted(address,address,uint256,uint256)"(
      token?: string | null,
      borrower?: string | null,
      amount?: null,
      feeAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        token: string;
        borrower: string;
        amount: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    FlashLoanCompleted(
      token?: string | null,
      borrower?: string | null,
      amount?: null,
      feeAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        token: string;
        borrower: string;
        amount: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "TokensWithdrawn(bytes32,address,address,uint256,uint256,uint256,uint256,uint256)"(
      contextId?: BytesLike | null,
      provider?: string | null,
      token?: string | null,
      baseTokenAmount?: null,
      poolTokenAmount?: null,
      externalProtectionBaseTokenAmount?: null,
      bntAmount?: null,
      withdrawalFeeAmount?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        contextId: string;
        provider: string;
        token: string;
        baseTokenAmount: BigNumber;
        poolTokenAmount: BigNumber;
        externalProtectionBaseTokenAmount: BigNumber;
        bntAmount: BigNumber;
        withdrawalFeeAmount: BigNumber;
      }
    >;

    TokensWithdrawn(
      contextId?: BytesLike | null,
      provider?: string | null,
      token?: string | null,
      baseTokenAmount?: null,
      poolTokenAmount?: null,
      externalProtectionBaseTokenAmount?: null,
      bntAmount?: null,
      withdrawalFeeAmount?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        contextId: string;
        provider: string;
        token: string;
        baseTokenAmount: BigNumber;
        poolTokenAmount: BigNumber;
        externalProtectionBaseTokenAmount: BigNumber;
        bntAmount: BigNumber;
        withdrawalFeeAmount: BigNumber;
      }
    >;

    "WithdrawalCompleted(bytes32,address,address,uint256,uint256,uint256,uint32)"(
      contextId?: BytesLike | null,
      pool?: string | null,
      provider?: string | null,
      requestId?: null,
      poolTokenAmount?: null,
      reserveTokenAmount?: null,
      timeElapsed?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, number],
      {
        contextId: string;
        pool: string;
        provider: string;
        requestId: BigNumber;
        poolTokenAmount: BigNumber;
        reserveTokenAmount: BigNumber;
        timeElapsed: number;
      }
    >;

    WithdrawalCompleted(
      contextId?: BytesLike | null,
      pool?: string | null,
      provider?: string | null,
      requestId?: null,
      poolTokenAmount?: null,
      reserveTokenAmount?: null,
      timeElapsed?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, number],
      {
        contextId: string;
        pool: string;
        provider: string;
        requestId: BigNumber;
        poolTokenAmount: BigNumber;
        reserveTokenAmount: BigNumber;
        timeElapsed: number;
      }
    >;

    "WithdrawalInitiated(address,address,uint256,uint256,uint256)"(
      pool?: string | null,
      provider?: string | null,
      requestId?: BigNumberish | null,
      poolTokenAmount?: null,
      reserveTokenAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        pool: string;
        provider: string;
        requestId: BigNumber;
        poolTokenAmount: BigNumber;
        reserveTokenAmount: BigNumber;
      }
    >;

    WithdrawalInitiated(
      pool?: string | null,
      provider?: string | null,
      requestId?: BigNumberish | null,
      poolTokenAmount?: null,
      reserveTokenAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        pool: string;
        provider: string;
        requestId: BigNumber;
        poolTokenAmount: BigNumber;
        reserveTokenAmount: BigNumber;
      }
    >;
  };

  estimateGas: {
    cancelWithdrawal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectionByPool(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPools(
      tokens: string[],
      poolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositFor(
      provider: string,
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashLoan(
      token: string,
      amount: BigNumberish,
      recipient: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initWithdrawal(
      poolToken: string,
      poolTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityPools(overrides?: CallOverrides): Promise<BigNumber>;

    migrateLiquidity(
      token: string,
      provider: string,
      amount: BigNumberish,
      availableAmount: BigNumberish,
      originalAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migratePools(
      pools: string[],
      newPoolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolCollections(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tradeBySourceAmount(
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      minReturnAmount: BigNumberish,
      deadline: BigNumberish,
      beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tradeByTargetAmount(
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      maxSourceAmount: BigNumberish,
      deadline: BigNumberish,
      beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawNetworkFees(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelWithdrawal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectionByPool(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPools(
      tokens: string[],
      poolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositFor(
      provider: string,
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashLoan(
      token: string,
      amount: BigNumberish,
      recipient: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initWithdrawal(
      poolToken: string,
      poolTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateLiquidity(
      token: string,
      provider: string,
      amount: BigNumberish,
      availableAmount: BigNumberish,
      originalAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migratePools(
      pools: string[],
      newPoolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolCollections(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tradeBySourceAmount(
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      minReturnAmount: BigNumberish,
      deadline: BigNumberish,
      beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tradeByTargetAmount(
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      maxSourceAmount: BigNumberish,
      deadline: BigNumberish,
      beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNetworkFees(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
