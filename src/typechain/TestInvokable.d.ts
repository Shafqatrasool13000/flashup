/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestInvokableInterface extends ethers.utils.Interface {
  functions: {
    "execute(bytes)": FunctionFragment;
    "invoke(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "execute", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "invoke",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invoke", data: BytesLike): Result;

  events: {
    "HelperDump(address,bytes32,address,uint256,uint256,bool)": EventFragment;
    "SwapDump(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HelperDump"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapDump"): EventFragment;
}

export type HelperDumpEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, boolean] & {
    sender: string;
    dataHash: string;
    currentTokenAddress: string;
    currentTokenAmount: BigNumber;
    currentRepaymentAmount: BigNumber;
    isCurrentTokenEther: boolean;
  }
>;

export type SwapDumpEvent = TypedEvent<[string] & { swapData: string }>;

export class TestInvokable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestInvokableInterface;

  functions: {
    execute(
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    invoke(
      invokeAddress: string,
      invokeData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  execute(
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  invoke(
    invokeAddress: string,
    invokeData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    execute(data: BytesLike, overrides?: CallOverrides): Promise<void>;

    invoke(
      invokeAddress: string,
      invokeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HelperDump(address,bytes32,address,uint256,uint256,bool)"(
      sender?: null,
      dataHash?: null,
      currentTokenAddress?: null,
      currentTokenAmount?: null,
      currentRepaymentAmount?: null,
      isCurrentTokenEther?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, boolean],
      {
        sender: string;
        dataHash: string;
        currentTokenAddress: string;
        currentTokenAmount: BigNumber;
        currentRepaymentAmount: BigNumber;
        isCurrentTokenEther: boolean;
      }
    >;

    HelperDump(
      sender?: null,
      dataHash?: null,
      currentTokenAddress?: null,
      currentTokenAmount?: null,
      currentRepaymentAmount?: null,
      isCurrentTokenEther?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, boolean],
      {
        sender: string;
        dataHash: string;
        currentTokenAddress: string;
        currentTokenAmount: BigNumber;
        currentRepaymentAmount: BigNumber;
        isCurrentTokenEther: boolean;
      }
    >;

    "SwapDump(bytes)"(
      swapData?: null
    ): TypedEventFilter<[string], { swapData: string }>;

    SwapDump(swapData?: null): TypedEventFilter<[string], { swapData: string }>;
  };

  estimateGas: {
    execute(
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    invoke(
      invokeAddress: string,
      invokeData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    execute(
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    invoke(
      invokeAddress: string,
      invokeData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
