/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FCompoundActions,
  FCompoundActionsInterface,
} from "../FCompoundActions";

const _abi = [
  {
    inputs: [],
    name: "CETH_ADDR",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "COMPTROLLER_ADDR",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ETH_ADDR",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_cTokenAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "borrow",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_cTokenAddr",
        type: "address",
      },
    ],
    name: "enterMarket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_cTokenAddrs",
        type: "address[]",
      },
    ],
    name: "enterMarkets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_cTokenAddr",
        type: "address",
      },
    ],
    name: "exitMarket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_cTokenAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "repayBorrow",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ddd806100206000396000f3fe6080604052600436106100915760003560e01c80637753f47b116100595780637753f47b14610164578063abdb5ea81461018c578063c29982381461019f578063ede4edd0146101bf578063f3fef3a3146101df57600080fd5b80633fe5d4251461009657806346d6773b146100b857806347e7ef24146100fc5780634b8a35291461011c57806350fbd6421461013c575b600080fd5b3480156100a257600080fd5b506100b66100b1366004610ac8565b6101ff565b005b3480156100c457600080fd5b506100e07305df6c772a563ffb37fd3e04c1a279fb3022862181565b6040516001600160a01b03909116815260200160405180910390f35b34801561010857600080fd5b506100b6610117366004610b07565b610270565b34801561012857600080fd5b506100b6610137366004610b07565b6102fc565b34801561014857600080fd5b506100e07364078a6189bf45f80091c6ff2fcee1b15ac8dbde81565b34801561017057600080fd5b506100e073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6100b661019a366004610b07565b6103c8565b3480156101ab57600080fd5b506100b66101ba366004610b32565b610824565b3480156101cb57600080fd5b506100b66101da366004610ac8565b61095a565b3480156101eb57600080fd5b506100b66101fa366004610b07565b610a43565b60408051600180825281830190925260009160208083019080368337019050509050818160008151811061024357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505061026c81610824565b5050565b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038316906323b872dd906064015b602060405180830381600087803b1580156102bf57600080fd5b505af11580156102d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f79190610c5a565b505050565b60405163317afabb60e21b8152600481018290526001600160a01b0383169063c5ebeaec90602401602060405180830381600087803b15801561033e57600080fd5b505af1158015610352573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103769190610c7a565b1561026c5760405162461bcd60e51b815260206004820152601f60248201527f46436f6d706f756e64416374696f6e733a20626f72726f77206661696c65640060448201526064015b60405180910390fd5b6040516305eff7ef60e21b81523060048201526000906001600160a01b038416906317bfdfbc90602401602060405180830381600087803b15801561040c57600080fd5b505af1158015610420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104449190610c7a565b905080821115610452578091505b6001600160a01b0383167364078a6189bf45f80091c6ff2fcee1b15ac8dbde1415610516576000349050836001600160a01b0316634e4d9fea846040518263ffffffff1660e01b81526004016000604051808303818588803b1580156104b757600080fd5b505af11580156104cb573d6000803e3d6000fd5b50505050508281111561051057336108fc6104e68584610d34565b6040518115909202916000818181858888f1935050505015801561050e573d6000803e3d6000fd5b505b50505050565b6000836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561055157600080fd5b505afa158015610565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105899190610aeb565b6040516323b872dd60e01b8152336004820152306024820152604481018590529091506001600160a01b038216906323b872dd90606401602060405180830381600087803b1580156105da57600080fd5b505af11580156105ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106129190610c5a565b50604051636eb1769f60e11b81523060048201526001600160a01b03858116602483015284919083169063dd62ed3e9060440160206040518083038186803b15801561065d57600080fd5b505afa158015610671573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106959190610c7a565b101561071f5760405163095ea7b360e01b81526001600160a01b0385811660048301526024820185905282169063095ea7b390604401602060405180830381600087803b1580156106e557600080fd5b505af11580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d9190610c5a565b505b60405163073a938160e11b8152600481018490526001600160a01b03851690630e75270290602401602060405180830381600087803b15801561076157600080fd5b505af1158015610775573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107999190610c7a565b156107f25760405162461bcd60e51b8152602060048201526024808201527f46436f6d706f756e64416374696f6e733a20726570617920746f6b656e2066616044820152631a5b195960e21b60648201526084016103bf565b34156105105760405133903480156108fc02916000818181858888f1935050505015801561050e573d6000803e3d6000fd5b604051631853304760e31b81526000907305df6c772a563ffb37fd3e04c1a279fb302286219063c29982389061085e908590600401610c92565b600060405180830381600087803b15801561087857600080fd5b505af115801561088c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108b49190810190610bd3565b905060005b81518110156102f7578181815181106108e257634e487b7160e01b600052603260045260246000fd5b60200260200101516000146109485760405162461bcd60e51b815260206004820152602660248201527f46436f6d706f756e64416374696f6e733a20656e746572206d61726b6574732060448201526519985a5b195960d21b60648201526084016103bf565b8061095281610d4b565b9150506108b9565b604051630ede4edd60e41b81526001600160a01b03821660048201527305df6c772a563ffb37fd3e04c1a279fb302286219063ede4edd090602401602060405180830381600087803b1580156109af57600080fd5b505af11580156109c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e79190610c7a565b15610a405760405162461bcd60e51b8152602060048201526024808201527f46436f6d706f756e64416374696f6e733a2065786974206d61726b65742066616044820152631a5b195960e21b60648201526084016103bf565b50565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610a9557604051339082156108fc029083906000818181858888f193505050501580156102f7573d6000803e3d6000fd5b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016102a5565b600060208284031215610ad9578081fd5b8135610ae481610d92565b9392505050565b600060208284031215610afc578081fd5b8151610ae481610d92565b60008060408385031215610b19578081fd5b8235610b2481610d92565b946020939093013593505050565b60006020808385031215610b44578182fd5b823567ffffffffffffffff811115610b5a578283fd5b8301601f81018513610b6a578283fd5b8035610b7d610b7882610d10565b610cdf565b80828252848201915084840188868560051b8701011115610b9c578687fd5b8694505b83851015610bc7578035610bb381610d92565b835260019490940193918501918501610ba0565b50979650505050505050565b60006020808385031215610be5578182fd5b825167ffffffffffffffff811115610bfb578283fd5b8301601f81018513610c0b578283fd5b8051610c19610b7882610d10565b80828252848201915084840188868560051b8701011115610c38578687fd5b8694505b83851015610bc7578051835260019490940193918501918501610c3c565b600060208284031215610c6b578081fd5b81518015158114610ae4578182fd5b600060208284031215610c8b578081fd5b5051919050565b6020808252825182820181905260009190848201906040850190845b81811015610cd35783516001600160a01b031683529284019291840191600101610cae565b50909695505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d0857610d08610d7c565b604052919050565b600067ffffffffffffffff821115610d2a57610d2a610d7c565b5060051b60200190565b600082821015610d4657610d46610d66565b500390565b6000600019821415610d5f57610d5f610d66565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a4057600080fdfea2646970667358221220a4bf7b07252b03d4f8794967e7d03057dc7abc3140976dde260ae908e6ff4ba364736f6c63430008040033";

export class FCompoundActions__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FCompoundActions> {
    return super.deploy(overrides || {}) as Promise<FCompoundActions>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FCompoundActions {
    return super.attach(address) as FCompoundActions;
  }
  connect(signer: Signer): FCompoundActions__factory {
    return super.connect(signer) as FCompoundActions__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FCompoundActionsInterface {
    return new utils.Interface(_abi) as FCompoundActionsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FCompoundActions {
    return new Contract(address, _abi, signerOrProvider) as FCompoundActions;
  }
}
