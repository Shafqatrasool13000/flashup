/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { HCToken, HCTokenInterface } from "../HCToken";

const _abi = [
  {
    inputs: [],
    name: "MSG_SENDER_KEY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NATIVE_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PERCENTAGE_BASE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "POSTPROCESS_SIG",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "cache",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getContractName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "cToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "mintAmount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "postProcess",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "cToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "redeemTokens",
        type: "uint256",
      },
    ],
    name: "redeem",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "cToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "redeemAmount",
        type: "uint256",
      },
    ],
    name: "redeemUnderlying",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "cToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "borrower",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "repayAmount",
        type: "uint256",
      },
    ],
    name: "repayBorrowBehalf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stack",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611636806100206000396000f3fe6080604052600436106100a75760003560e01c806399eb59b91161006457806399eb59b91461015b578063c272291614610188578063dc9031c414610192578063df2ebdbb146101b2578063f5f5ba72146101f2578063fa2901a51461022857600080fd5b80630f532d18146100ac5780631e9a6950146100f357806340c10f191461010657806359086a5e1461011957806387c139431461012c5780639629417814610148575b600080fd5b3480156100b857600080fd5b506100e07fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a81565b6040519081526020015b60405180910390f35b6100e06101013660046112f1565b61025c565b6100e06101143660046112f1565b6104e0565b6100e06101273660046112b1565b610738565b34801561013857600080fd5b506100e0670de0b6b3a764000081565b6100e06101563660046112f1565b6109c7565b34801561016757600080fd5b506100e061017636600461133c565b60016020526000908152604090205481565b610190610c2d565b005b34801561019e57600080fd5b506100e06101ad36600461133c565b610c71565b3480156101be57600080fd5b506101da73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6040516001600160a01b0390911681526020016100ea565b3480156101fe57600080fd5b5060408051808201825260078152662421aa37b5b2b760c91b602082015290516100ea91906113fa565b34801561023457600080fd5b50610243636139148b60e11b81565b6040516001600160e01b031990911681526020016100ea565b60008061026884610c92565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b1580156102ad57600080fd5b505afa1580156102c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e59190611354565b9050846102f28186610d05565b60405163db006a7560e01b8152600481018290529095506001600160a01b0382169063db006a7590602401602060405180830381600087803b15801561033757600080fd5b505af1925050508015610367575060408051601f3d908101601f1916820190925261036491810190611354565b60015b6103ef57610373611549565b806308c379a014156103c15750610388611561565b8061039357506103c3565b6103bb6040518060400160405280600681526020016572656465656d60d01b81525082610dd3565b50610444565b505b6103ea6040518060400160405280600681526020016572656465656d60d01b815250610e2b565b610444565b610442816000146040518060400160405280600681526020016572656465656d60d01b81525061041e84610e5b565b60405160200161042e91906113cc565b604051602081830303815290604052610f89565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b15801561048657600080fd5b505afa15801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be9190611354565b90506104c984610f9d565b6104d38382611459565b9450505050505b92915050565b6040516370a0823160e01b8152306004820152600090839082906001600160a01b038316906370a082319060240160206040518083038186803b15801561052657600080fd5b505afa15801561053a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055e9190611354565b9050600061056b86610c92565b90506105778186610d05565b9450610584818787610fdc565b60405163140e25ad60e31b8152600481018690526001600160a01b0384169063a0712d6890602401602060405180830381600087803b1580156105c657600080fd5b505af19250505080156105f6575060408051601f3d908101601f191682019092526105f391810190611354565b60015b61067a57610602611549565b806308c379a0141561064e5750610617611561565b806106225750610650565b610648604051806040016040528060048152602001631b5a5b9d60e21b81525082610dd3565b506106a9565b505b610675604051806040016040528060048152602001631b5a5b9d60e21b815250610e2b565b6106a9565b6106a781600014604051806040016040528060048152602001631b5a5b9d60e21b81525061041e84610e5b565b505b6106b38187611146565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b1580156106f557600080fd5b505afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d9190611354565b90506104c987610f9d565b6000838161074582610c92565b6040516305eff7ef60e21b81526001600160a01b0387811660048301529192506000918416906317bfdfbc90602401602060405180830381600087803b15801561078e57600080fd5b505af11580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c69190611354565b9050808510156107d35750835b6107de828883610fdc565b6040516304c11f0360e31b81526001600160a01b03878116600483015260248201839052841690632608f81890604401602060405180830381600087803b15801561082857600080fd5b505af1925050508015610858575060408051601f3d908101601f1916820190925261085591810190611354565b60015b6108f657610864611549565b806308c379a014156108bd5750610879611561565b8061088457506108bf565b6108b7604051806040016040528060118152602001703932b830bca137b93937bba132b430b63360791b81525082610dd3565b50610932565b505b6108f1604051806040016040528060118152602001703932b830bca137b93937bba132b430b63360791b815250610e2b565b610932565b61093081600014604051806040016040528060118152602001703932b830bca137b93937bba132b430b63360791b81525061041e84610e5b565b505b61093c8288611146565b6040516305eff7ef60e21b81526001600160a01b038781166004830152600091908516906317bfdfbc90602401602060405180830381600087803b15801561098357600080fd5b505af1158015610997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bb9190611354565b98975050505050505050565b6040516370a0823160e01b8152306004820152600090839082906001600160a01b038316906370a082319060240160206040518083038186803b158015610a0d57600080fd5b505afa158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a459190611354565b60405163852a12e360e01b8152600481018690529091506001600160a01b0383169063852a12e390602401602060405180830381600087803b158015610a8a57600080fd5b505af1925050508015610aba575060408051601f3d908101601f19168201909252610ab791810190611354565b60015b610b5657610ac6611549565b806308c379a01415610b1e5750610adb611561565b80610ae65750610b20565b610b186040518060400160405280601081526020016f72656465656d556e6465726c79696e6760801b81525082610dd3565b50610b91565b505b610b516040518060400160405280601081526020016f72656465656d556e6465726c79696e6760801b815250610e2b565b610b91565b610b8f816000146040518060400160405280601081526020016f72656465656d556e6465726c79696e6760801b81525061041e84610e5b565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b158015610bd357600080fd5b505afa158015610be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0b9190611354565b90506000610c1887610c92565b9050610c2381610f9d565b6104d38284611459565b60405162461bcd60e51b8152602060048201526014602482015273496e76616c696420706f73742070726f6365737360601b60448201526064015b60405180910390fd5b60008181548110610c8157600080fd5b600091825260209091200154905081565b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610ccd57600080fd5b505afa158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104da9190611295565b60006000198214610d175750806104da565b6001600160a01b0383161580610d4957506001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b15610d555750476104da565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a082319060240160206040518083038186803b158015610d9457600080fd5b505afa158015610da8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcc9190611354565b9392505050565b6040805180820190915260078152662421aa37b5b2b760c91b60208201528282604051602001610e059392919061136c565b60408051601f198184030181529082905262461bcd60e51b8252610c68916004016113fa565b610e58816040518060400160405280600b81526020016a155b9cdc1958da599a595960aa1b815250610dd3565b50565b606081610e7f5750506040805180820190915260018152600360fc1b602082015290565b6000825b8015610ea95781610e93816114ee565b9250610ea29050600a82611445565b9050610e83565b5060008167ffffffffffffffff811115610ed357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610efd576020820181803683370190505b509050815b8015610f8157610f13600a86611509565b610f1e90603061142d565b60f81b82610f2d600184611459565b81518110610f4b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610f6d600a86611445565b945080610f798161149c565b915050610f02565b509392505050565b82610f9857610f988282610dd3565b505050565b600080546001810182559080526001600160a01b0382167f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639091015550565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b390604401600060405180830381600087803b15801561102657600080fd5b505af1925050508015611037575060015b610f985760405163095ea7b360e01b81526001600160a01b0383811660048301526000602483015284169063095ea7b390604401602060405180830381600087803b15801561108557600080fd5b505af1158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd919061131c565b5060405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b390604401602060405180830381600087803b15801561110857600080fd5b505af115801561111c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611140919061131c565b50505050565b604051636eb1769f60e11b81523060048201526001600160a01b0382811660248301526000919084169063dd62ed3e9060440160206040518083038186803b15801561119157600080fd5b505afa1580156111a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c99190611354565b11156112915760405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b390604401600060405180830381600087803b15801561121957600080fd5b505af192505050801561122a575060015b6112915760405163095ea7b360e01b81526001600160a01b0382811660048301526001602483015283169063095ea7b390604401600060405180830381600087803b15801561127857600080fd5b505af115801561128c573d6000803e3d6000fd5b505050505b5050565b6000602082840312156112a6578081fd5b8151610dcc816115eb565b6000806000606084860312156112c5578182fd5b83356112d0816115eb565b925060208401356112e0816115eb565b929592945050506040919091013590565b60008060408385031215611303578182fd5b823561130e816115eb565b946020939093013593505050565b60006020828403121561132d578081fd5b81518015158114610dcc578182fd5b60006020828403121561134d578081fd5b5035919050565b600060208284031215611365578081fd5b5051919050565b6000845161137e818460208901611470565b605f60f81b908301908152845161139c816001840160208901611470565b6101d160f51b6001929091019182015283516113bf816003840160208801611470565b0160030195945050505050565b65032b93937b9160d51b8152600082516113ed816006850160208701611470565b9190910160060192915050565b6020815260008251806020840152611419816040850160208701611470565b601f01601f19169190910160400192915050565b600082198211156114405761144061151d565b500190565b60008261145457611454611533565b500490565b60008282101561146b5761146b61151d565b500390565b60005b8381101561148b578181015183820152602001611473565b838111156111405750506000910152565b6000816114ab576114ab61151d565b506000190190565b601f8201601f1916810167ffffffffffffffff811182821017156114e757634e487b7160e01b600052604160045260246000fd5b6040525050565b60006000198214156115025761150261151d565b5060010190565b60008261151857611518611533565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600060033d111561155e57600481823e5160e01c5b90565b600060443d101561156f5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561159f57505050505090565b82850191508151818111156115b75750505050505090565b843d87010160208285010111156115d15750505050505090565b6115e0602082860101876114b3565b509095945050505050565b6001600160a01b0381168114610e5857600080fdfea2646970667358221220240e4b130daf840853fafe86b833aba2e1ddabb25f1bda47e3596703063f08f064736f6c63430008040033";

export class HCToken__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<HCToken> {
    return super.deploy(overrides || {}) as Promise<HCToken>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): HCToken {
    return super.attach(address) as HCToken;
  }
  connect(signer: Signer): HCToken__factory {
    return super.connect(signer) as HCToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HCTokenInterface {
    return new utils.Interface(_abi) as HCTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HCToken {
    return new Contract(address, _abi, signerOrProvider) as HCToken;
  }
}
