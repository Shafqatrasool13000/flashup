/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { HBalancer, HBalancerInterface } from "../HBalancer";

const _abi = [
  {
    inputs: [],
    name: "MSG_SENDER_KEY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NATIVE_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PERCENTAGE_BASE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "POSTPROCESS_SIG",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VAULT",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IVault.SwapKind",
        name: "kind",
        type: "uint8",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "poolId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "assetInIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "assetOutIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
        ],
        internalType: "struct IVault.BatchSwapStep[]",
        name: "swaps",
        type: "tuple[]",
      },
      {
        internalType: "contract IAsset[]",
        name: "assets",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "bool",
            name: "fromInternalBalance",
            type: "bool",
          },
          {
            internalType: "address payable",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "bool",
            name: "toInternalBalance",
            type: "bool",
          },
        ],
        internalType: "struct IVault.FundManagement",
        name: "funds",
        type: "tuple",
      },
      {
        internalType: "int256[]",
        name: "limits",
        type: "int256[]",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "batchSwap",
    outputs: [
      {
        internalType: "int256[]",
        name: "",
        type: "int256[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "cache",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "userData",
        type: "bytes",
      },
    ],
    name: "flashLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getContractName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "postProcess",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stack",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "poolId",
            type: "bytes32",
          },
          {
            internalType: "enum IVault.SwapKind",
            name: "kind",
            type: "uint8",
          },
          {
            internalType: "contract IAsset",
            name: "assetIn",
            type: "address",
          },
          {
            internalType: "contract IAsset",
            name: "assetOut",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
        ],
        internalType: "struct IVault.SingleSwap",
        name: "singleSwap",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "bool",
            name: "fromInternalBalance",
            type: "bool",
          },
          {
            internalType: "address payable",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "bool",
            name: "toInternalBalance",
            type: "bool",
          },
        ],
        internalType: "struct IVault.FundManagement",
        name: "funds",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506112fc806100206000396000f3fe6080604052600436106100a75760003560e01c806399eb59b91161006457806399eb59b9146101a4578063c2722916146101d1578063dc9031c4146101d9578063df2ebdbb146101f9578063f5f5ba7214610221578063fa2901a51461025957600080fd5b80630f532d18146100ac578063411557d1146100f357806352bbbe29146101335780635c38449e1461014657806387c1394314610168578063945bcec914610184575b600080fd5b3480156100b857600080fd5b506100e07fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a81565b6040519081526020015b60405180910390f35b3480156100ff57600080fd5b5061011b73ba12222222228d8ba445958a75a0704d566bf2c881565b6040516001600160a01b0390911681526020016100ea565b6100e0610141366004610d84565b61028d565b34801561015257600080fd5b50610166610161366004610a03565b61045a565b005b34801561017457600080fd5b506100e0670de0b6b3a764000081565b610197610192366004610bca565b6104cf565b6040516100ea9190610f4f565b3480156101b057600080fd5b506100e06101bf366004610bb2565b60016020526000908152604090205481565b6101666107ba565b3480156101e557600080fd5b506100e06101f4366004610bb2565b6107fd565b34801561020557600080fd5b5061011b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561022d57600080fd5b506040805180820182526009815268242130b630b731b2b960b91b602082015290516100ea91906110f3565b34801561026557600080fd5b50610274636139148b60e11b81565b6040516001600160e01b031990911681526020016100ea565b604080850151608086015191516323b872dd60e01b815233600482015230602482015260448101929092526000916001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156102ea57600080fd5b505af11580156102fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103229190610b8f565b506040808601516080870151915163095ea7b360e01b815273ba12222222228d8ba445958a75a0704d566bf2c8600482015260248101929092526001600160a01b03169063095ea7b390604401602060405180830381600087803b15801561038957600080fd5b505af115801561039d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c19190610b8f565b506040516352bbbe2960e01b815273ba12222222228d8ba445958a75a0704d566bf2c8906352bbbe29906103ff908890889088908890600401611106565b602060405180830381600087803b15801561041957600080fd5b505af115801561042d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104519190610e58565b95945050505050565b604051632e1c224f60e11b815273ba12222222228d8ba445958a75a0704d566bf2c890635c38449e90610497908790879087908790600401610f62565b600060405180830381600087803b1580156104b157600080fd5b505af11580156104c5573d6000803e3d6000fd5b5050505050505050565b606060005b86518160ff161015610717576000878260ff168151811061050557634e487b7160e01b600052603260045260246000fd5b602002602001015160200151905086818151811061053357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166323b872dd33308b8660ff168151811061056e57634e487b7160e01b600052603260045260246000fd5b6020908102919091010151606001516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b1580156105cc57600080fd5b505af11580156105e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106049190610b8f565b5086818151811061062557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663095ea7b373ba12222222228d8ba445958a75a0704d566bf2c88a8560ff168151811061067357634e487b7160e01b600052603260045260246000fd5b6020026020010151606001516040518363ffffffff1660e01b81526004016106b09291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b1580156106ca57600080fd5b505af11580156106de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107029190610b8f565b5050808061070f9061125e565b9150506104d4565b5060405163945bcec960e01b815273ba12222222228d8ba445958a75a0704d566bf2c89063945bcec990610759908a908a908a908a908a908a90600401610fdb565b600060405180830381600087803b15801561077357600080fd5b505af1158015610787573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107af9190810190610afd565b979650505050505050565b60405162461bcd60e51b8152602060048201526014602482015273496e76616c696420706f73742070726f6365737360601b604482015260640160405180910390fd5b6000818154811061080d57600080fd5b600091825260209091200154905081565b600082601f83011261082e578081fd5b8135602061084361083e8361123b565b61120b565b80838252828201915082860187848660051b8901011115610862578586fd5b855b85811015610889578135610877816112a0565b84529284019290840190600101610864565b5090979650505050505050565b600082601f8301126108a6578081fd5b813560206108b661083e8361123b565b80838252828201915082860187848660051b89010111156108d5578586fd5b855b85811015610889578135845292840192908401906001016108d7565b600082601f830112610903578081fd5b81356001600160401b0381111561091c5761091c61128a565b61092f601f8201601f191660200161120b565b818152846020838601011115610943578283fd5b816020850160208301379081016020019190915292915050565b8035610968816112a0565b919050565b80356002811061096857600080fd5b60006080828403121561098d578081fd5b604051608081018181106001600160401b03821117156109af576109af61128a565b60405290508082356109c0816112a0565b815260208301356109d0816112b8565b602082015260408301356109e3816112a0565b604082015260608301356109f6816112b8565b6060919091015292915050565b60008060008060808587031215610a18578384fd5b8435610a23816112a0565b93506020858101356001600160401b0380821115610a3f578586fd5b818801915088601f830112610a52578586fd5b8135610a6061083e8261123b565b8082825285820191508585018c878560051b8801011115610a7f57898afd5b8995505b83861015610aaa578035610a96816112a0565b835260019590950194918601918601610a83565b50975050506040880135925080831115610ac2578485fd5b610ace89848a01610896565b94506060880135925080831115610ae3578384fd5b5050610af1878288016108f3565b91505092959194509250565b60006020808385031215610b0f578182fd5b82516001600160401b03811115610b24578283fd5b8301601f81018513610b34578283fd5b8051610b4261083e8261123b565b80828252848201915084840188868560051b8701011115610b61578687fd5b8694505b83851015610b83578051835260019490940193918501918501610b65565b50979650505050505050565b600060208284031215610ba0578081fd5b8151610bab816112b8565b9392505050565b600060208284031215610bc3578081fd5b5035919050565b6000806000806000806101208789031215610be3578384fd5b610bec8761096d565b95506001600160401b0360208801351115610c05578384fd5b87601f602089013589010112610c19578384fd5b610c2c61083e602089013589013561123b565b6020888101358901803580845282840193928281019260059290921b909101018b1015610c57578687fd5b865b60208b01358b0135811015610d0b576001600160401b0382351115610c7c578788fd5b60208b01358b0182350160a0818e03601f19011215610c99578889fd5b610ca16111c1565b602082013581526040820135602082015260608201356040820152608082013560608201526001600160401b0360a08301351115610cdd57898afd5b610cf08e602060a08501358501016108f3565b60808201528552506020938401939190910190600101610c59565b5090965050506001600160401b0360408801351115610d28578384fd5b610d38886040890135890161081e565b9350610d47886060890161097c565b92506001600160401b0360e08801351115610d60578182fd5b610d708860e08901358901610896565b915061010087013590509295509295509295565b60008060008060e08587031215610d99578182fd5b84356001600160401b0380821115610daf578384fd5b9086019060c08289031215610dc2578384fd5b610dca6111e9565b82358152610dda6020840161096d565b60208201526040830135610ded816112a0565b6040820152610dfe6060840161095d565b60608201526080830135608082015260a083013582811115610e1e578586fd5b610e2a8a8286016108f3565b60a083015250809650505050610e43866020870161097c565b939693955050505060a08201359160c0013590565b600060208284031215610e69578081fd5b5051919050565b6000815180845260208085019450808401835b83811015610ea85781516001600160a01b031687529582019590820190600101610e83565b509495945050505050565b6000815180845260208085019450808401835b83811015610ea857815187529582019590820190600101610ec6565b60008151808452815b81811015610f0757602081850181015186830182015201610eeb565b81811115610f185782602083870101525b50601f01601f19169290920160200192915050565b60028110610f4b57634e487b7160e01b600052602160045260246000fd5b9052565b602081526000610bab6020830184610eb3565b6001600160a01b0385811682526080602080840182905286519184018290526000928782019290919060a0860190855b81811015610fb0578551851683529483019491830191600101610f92565b50508581036040870152610fc48189610eb3565b935050505082810360608401526107af8185610ee2565b6000610120808301610fed848b610f2d565b60208481019290925288519081905261014080850192600583901b8601909101918a8201855b828110156110765787850361013f190186528151805186528481015185870152604080820151908701526060808201519087015260809081015160a09187018290529061106281880183610ee2565b978601979650505090830190600101611013565b50505050838103604085015261108c8189610e70565b9150506110cc606084018780516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b82810360e08401526110de8186610eb3565b91505082610100830152979650505050505050565b602081526000610bab6020830184610ee2565b60e08152845160e082015260006020860151611126610100840182610f2d565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c061018084015261116f6101a0840182610ee2565b9150506111af602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b60405160a081016001600160401b03811182821017156111e3576111e361128a565b60405290565b60405160c081016001600160401b03811182821017156111e3576111e361128a565b604051601f8201601f191681016001600160401b03811182821017156112335761123361128a565b604052919050565b60006001600160401b038211156112545761125461128a565b5060051b60200190565b600060ff821660ff81141561128157634e487b7160e01b82526011600452602482fd5b60010192915050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146112b557600080fd5b50565b80151581146112b557600080fdfea2646970667358221220ae97399ab21f85e320df0a728f1d1ed83238875c56d801a40c03304b3df8b65864736f6c63430008040033";

export class HBalancer__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<HBalancer> {
    return super.deploy(overrides || {}) as Promise<HBalancer>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): HBalancer {
    return super.attach(address) as HBalancer;
  }
  connect(signer: Signer): HBalancer__factory {
    return super.connect(signer) as HBalancer__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HBalancerInterface {
    return new utils.Interface(_abi) as HBalancerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HBalancer {
    return new Contract(address, _abi, signerOrProvider) as HBalancer;
  }
}
