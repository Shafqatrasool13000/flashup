/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestInvokable, TestInvokableInterface } from "../TestInvokable";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "dataHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "currentTokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "currentTokenAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "currentRepaymentAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isCurrentTokenEther",
        type: "bool",
      },
    ],
    name: "HelperDump",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "swapData",
        type: "bytes",
      },
    ],
    name: "SwapDump",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "invokeAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "invokeData",
        type: "bytes",
      },
    ],
    name: "invoke",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052606460015534801561001557600080fd5b50600080546001600160a01b0319166001179055610b0c806100386000396000f3fe60806040526004361061002a5760003560e01c806309c5eabe146100335780639bb66b281461004657005b3661003157005b005b610031610041366004610894565b610059565b610031610054366004610821565b610153565b61009882828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061019992505050565b806100a9576100a561022d565b5050565b6000806100b8838501856108ec565b9150915081600114156100ed576000818060200190518101906100db91906108d4565b90506100e681610237565b5050505050565b8160031415610123576000808280602001905181019061010d9190610793565b9150915061011b8282610249565b505050505050565b816004141561014d5760008180602001905181019061014291906108d4565b90506100e68161025c565b50505050565b610194833484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506102c792505050565b505050565b7f9586358b5895091f0ebfebde7118b5135333adbc7cad78410290244441e3bd226101c261034a565b825160208401206101d16103c2565b6101d96103fd565b6101e1610470565b6101e96104ab565b604080516001600160a01b039788168152602081019690965293909516928401929092526060830152608082015290151560a082015260c00160405180910390a150565b6102356104c6565b565b6100a56102426103c2565b33836105da565b6102548234836102c7565b6100a56104c6565b8034146102bc5760405162461bcd60e51b8152602060048201526024808201527f54657374496e766f6b61626c653a20646964206e6f7420666f72776172642076604482015263616c756560e01b60648201526084015b60405180910390fd5b6102c46104c6565b50565b600080846001600160a01b031684846040516102e3919061096b565b60006040518083038185875af1925050503d8060008114610320576040519150601f19603f3d011682016040523d82523d6000602084013e610325565b606091505b509150915081819061011b5760405162461bcd60e51b81526004016102b39190610987565b6000336001600160a01b03166370348f3e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561038557600080fd5b505afa158015610399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bd9190610777565b905090565b6000336001600160a01b03166311eefd5d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561038557600080fd5b6000336001600160a01b031663ff69ac366040518163ffffffff1660e01b815260040160206040518083038186803b15801561043857600080fd5b505afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bd91906108d4565b6000336001600160a01b0316636f27e9d86040518163ffffffff1660e01b815260040160206040518083038186803b15801561043857600080fd5b600060016104b76103c2565b6001600160a01b031614905090565b60006104fe6104d36103fd565b6104f86127106104f26104e46103fd565b6104ec610470565b9061068f565b9061069b565b906106a7565b90506001548111156105695760405162461bcd60e51b815260206004820152602e60248201527f4b6f6c6c61746572616c496e766f6b61626c653a2072657061796d656e74207260448201526d0caeec2e4c840e8dede40d0d2ced60931b60648201526084016102b3565b6105826105746103c2565b3361057d610470565b6105da565b6102c45760405162461bcd60e51b8152602060048201526024808201527f4b6f6c6c61746572616c496e766f6b61626c653a206661696c656420746f20726044820152636570617960e01b60648201526084016102b3565b600080546001600160a01b0385811691161415610603576105fb83836106b3565b506001610688565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905285169063a9059cbb90604401602060405180830381600087803b15801561064d57600080fd5b505af1158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190610874565b90505b9392505050565b60006106888284610a52565b60006106888284610a33565b60006106888284610a13565b804710156107165760405162461bcd60e51b815260206004820152602a60248201527f45787465726e616c43616c6c65723a20696e73756666696369656e742065746860448201526965722062616c616e636560b01b60648201526084016102b3565b6100a58282604051806020016040528060008152506102c7565b60008083601f840112610741578182fd5b50813567ffffffffffffffff811115610758578182fd5b60208301915083602082850101111561077057600080fd5b9250929050565b600060208284031215610788578081fd5b815161068881610ac1565b600080604083850312156107a5578081fd5b82516107b081610ac1565b602084015190925067ffffffffffffffff8111156107cc578182fd5b8301601f810185136107dc578182fd5b80516107ef6107ea826109eb565b6109ba565b818152866020838501011115610803578384fd5b610814826020830160208601610a69565b8093505050509250929050565b600080600060408486031215610835578081fd5b833561084081610ac1565b9250602084013567ffffffffffffffff81111561085b578182fd5b61086786828701610730565b9497909650939450505050565b600060208284031215610885578081fd5b81518015158114610688578182fd5b600080602083850312156108a6578182fd5b823567ffffffffffffffff8111156108bc578283fd5b6108c885828601610730565b90969095509350505050565b6000602082840312156108e5578081fd5b5051919050565b600080604083850312156108fe578182fd5b82359150602083013567ffffffffffffffff81111561091b578182fd5b8301601f8101851361092b578182fd5b80356109396107ea826109eb565b81815286602083850101111561094d578384fd5b81602084016020830137908101602001929092525090939092509050565b6000825161097d818460208701610a69565b9190910192915050565b60208152600082518060208401526109a6816040850160208701610a69565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff811182821017156109e3576109e3610aab565b604052919050565b600067ffffffffffffffff821115610a0557610a05610aab565b50601f01601f191660200190565b600082610a2e57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610a4d57610a4d610a95565b500290565b600082821015610a6457610a64610a95565b500390565b60005b83811015610a84578181015183820152602001610a6c565b8381111561014d5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146102c457600080fdfea264697066735822122032faa7c6436cba7842810a1b8f7fdacf276c0126ebfea89a7cf67662908fd15b64736f6c63430008040033";

export class TestInvokable__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestInvokable> {
    return super.deploy(overrides || {}) as Promise<TestInvokable>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestInvokable {
    return super.attach(address) as TestInvokable;
  }
  connect(signer: Signer): TestInvokable__factory {
    return super.connect(signer) as TestInvokable__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInvokableInterface {
    return new utils.Interface(_abi) as TestInvokableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestInvokable {
    return new Contract(address, _abi, signerOrProvider) as TestInvokable;
  }
}
