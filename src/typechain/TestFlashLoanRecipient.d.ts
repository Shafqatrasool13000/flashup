/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestFlashLoanRecipientInterface extends ethers.utils.Interface {
  functions: {
    "callbackData()": FunctionFragment;
    "onFlashLoan(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setAmountToReturn(uint256)": FunctionFragment;
    "setReenter(bool)": FunctionFragment;
    "snapshot(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "callbackData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onFlashLoan",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountToReturn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setReenter", values: [boolean]): string;
  encodeFunctionData(functionFragment: "snapshot", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "callbackData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmountToReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setReenter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "snapshot", data: BytesLike): Result;

  events: {};
}

export class TestFlashLoanRecipient extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestFlashLoanRecipientInterface;

  functions: {
    callbackData(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, BigNumber, string, BigNumber] & {
          caller: string;
          token: string;
          amount: BigNumber;
          feeAmount: BigNumber;
          data: string;
          receivedAmount: BigNumber;
        }
      ]
    >;

    onFlashLoan(
      caller: string,
      erc20Token: string,
      amount: BigNumberish,
      feeAmount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAmountToReturn(
      amountToReturn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReenter(
      reenter: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    snapshot(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  callbackData(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, string, BigNumber] & {
      caller: string;
      token: string;
      amount: BigNumber;
      feeAmount: BigNumber;
      data: string;
      receivedAmount: BigNumber;
    }
  >;

  onFlashLoan(
    caller: string,
    erc20Token: string,
    amount: BigNumberish,
    feeAmount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAmountToReturn(
    amountToReturn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReenter(
    reenter: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  snapshot(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    callbackData(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, string, BigNumber] & {
        caller: string;
        token: string;
        amount: BigNumber;
        feeAmount: BigNumber;
        data: string;
        receivedAmount: BigNumber;
      }
    >;

    onFlashLoan(
      caller: string,
      erc20Token: string,
      amount: BigNumberish,
      feeAmount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAmountToReturn(
      amountToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReenter(reenter: boolean, overrides?: CallOverrides): Promise<void>;

    snapshot(token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    callbackData(overrides?: CallOverrides): Promise<BigNumber>;

    onFlashLoan(
      caller: string,
      erc20Token: string,
      amount: BigNumberish,
      feeAmount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAmountToReturn(
      amountToReturn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReenter(
      reenter: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    snapshot(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    callbackData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onFlashLoan(
      caller: string,
      erc20Token: string,
      amount: BigNumberish,
      feeAmount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAmountToReturn(
      amountToReturn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReenter(
      reenter: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    snapshot(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
