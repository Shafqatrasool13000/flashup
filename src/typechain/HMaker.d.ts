/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HMakerInterface extends ethers.utils.Interface {
  functions: {
    "CHAIN_LOG()": FunctionFragment;
    "DAI_TOKEN()": FunctionFragment;
    "MSG_SENDER_KEY()": FunctionFragment;
    "NATIVE_TOKEN_ADDRESS()": FunctionFragment;
    "PERCENTAGE_BASE()": FunctionFragment;
    "POSTPROCESS_SIG()": FunctionFragment;
    "PROXY_REGISTRY()": FunctionFragment;
    "cache(bytes32)": FunctionFragment;
    "draw(address,uint256,uint256)": FunctionFragment;
    "freeETH(address,uint256,uint256)": FunctionFragment;
    "freeGem(address,uint256,uint256)": FunctionFragment;
    "getCdpManager()": FunctionFragment;
    "getContractName()": FunctionFragment;
    "getMcdJug()": FunctionFragment;
    "getProxyActions()": FunctionFragment;
    "openLockETHAndDraw(uint256,address,address,bytes32,uint256)": FunctionFragment;
    "openLockGemAndDraw(address,address,bytes32,uint256,uint256)": FunctionFragment;
    "postProcess()": FunctionFragment;
    "safeLockETH(uint256,address,uint256)": FunctionFragment;
    "safeLockGem(address,uint256,uint256)": FunctionFragment;
    "stack(uint256)": FunctionFragment;
    "wipe(address,uint256,uint256)": FunctionFragment;
    "wipeAll(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CHAIN_LOG", values?: undefined): string;
  encodeFunctionData(functionFragment: "DAI_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MSG_SENDER_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NATIVE_TOKEN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POSTPROCESS_SIG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROXY_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cache", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "draw",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freeETH",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freeGem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCdpManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractName",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getMcdJug", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProxyActions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openLockETHAndDraw",
    values: [BigNumberish, string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openLockGemAndDraw",
    values: [string, string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "postProcess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeLockETH",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeLockGem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stack", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "wipe",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wipeAll",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "CHAIN_LOG", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DAI_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MSG_SENDER_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NATIVE_TOKEN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POSTPROCESS_SIG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROXY_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cache", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "draw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freeETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freeGem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCdpManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMcdJug", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProxyActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLockETHAndDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLockGemAndDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeLockETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeLockGem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wipe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wipeAll", data: BytesLike): Result;

  events: {};
}

export class HMaker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HMakerInterface;

  functions: {
    CHAIN_LOG(overrides?: CallOverrides): Promise<[string]>;

    DAI_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<[string]>;

    NATIVE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<[string]>;

    PROXY_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    cache(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    draw(
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freeETH(
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freeGem(
      gemJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCdpManager(overrides?: CallOverrides): Promise<[string]>;

    getContractName(overrides?: CallOverrides): Promise<[string]>;

    getMcdJug(overrides?: CallOverrides): Promise<[string]>;

    getProxyActions(overrides?: CallOverrides): Promise<[string]>;

    openLockETHAndDraw(
      value: BigNumberish,
      ethJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openLockGemAndDraw(
      gemJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      wadC: BigNumberish,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    postProcess(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeLockETH(
      value: BigNumberish,
      ethJoin: string,
      cdp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeLockGem(
      gemJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stack(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    wipe(
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wipeAll(
      daiJoin: string,
      cdp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CHAIN_LOG(overrides?: CallOverrides): Promise<string>;

  DAI_TOKEN(overrides?: CallOverrides): Promise<string>;

  MSG_SENDER_KEY(overrides?: CallOverrides): Promise<string>;

  NATIVE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  PERCENTAGE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  POSTPROCESS_SIG(overrides?: CallOverrides): Promise<string>;

  PROXY_REGISTRY(overrides?: CallOverrides): Promise<string>;

  cache(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  draw(
    daiJoin: string,
    cdp: BigNumberish,
    wad: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freeETH(
    ethJoin: string,
    cdp: BigNumberish,
    wad: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freeGem(
    gemJoin: string,
    cdp: BigNumberish,
    wad: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCdpManager(overrides?: CallOverrides): Promise<string>;

  getContractName(overrides?: CallOverrides): Promise<string>;

  getMcdJug(overrides?: CallOverrides): Promise<string>;

  getProxyActions(overrides?: CallOverrides): Promise<string>;

  openLockETHAndDraw(
    value: BigNumberish,
    ethJoin: string,
    daiJoin: string,
    ilk: BytesLike,
    wadD: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openLockGemAndDraw(
    gemJoin: string,
    daiJoin: string,
    ilk: BytesLike,
    wadC: BigNumberish,
    wadD: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  postProcess(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeLockETH(
    value: BigNumberish,
    ethJoin: string,
    cdp: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeLockGem(
    gemJoin: string,
    cdp: BigNumberish,
    wad: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stack(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  wipe(
    daiJoin: string,
    cdp: BigNumberish,
    wad: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wipeAll(
    daiJoin: string,
    cdp: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CHAIN_LOG(overrides?: CallOverrides): Promise<string>;

    DAI_TOKEN(overrides?: CallOverrides): Promise<string>;

    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<string>;

    NATIVE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<string>;

    PROXY_REGISTRY(overrides?: CallOverrides): Promise<string>;

    cache(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    draw(
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    freeETH(
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    freeGem(
      gemJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCdpManager(overrides?: CallOverrides): Promise<string>;

    getContractName(overrides?: CallOverrides): Promise<string>;

    getMcdJug(overrides?: CallOverrides): Promise<string>;

    getProxyActions(overrides?: CallOverrides): Promise<string>;

    openLockETHAndDraw(
      value: BigNumberish,
      ethJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      wadD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLockGemAndDraw(
      gemJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      wadC: BigNumberish,
      wadD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postProcess(overrides?: CallOverrides): Promise<void>;

    safeLockETH(
      value: BigNumberish,
      ethJoin: string,
      cdp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    safeLockGem(
      gemJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stack(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    wipe(
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wipeAll(
      daiJoin: string,
      cdp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    CHAIN_LOG(overrides?: CallOverrides): Promise<BigNumber>;

    DAI_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<BigNumber>;

    NATIVE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<BigNumber>;

    PROXY_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    cache(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    draw(
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freeETH(
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freeGem(
      gemJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCdpManager(overrides?: CallOverrides): Promise<BigNumber>;

    getContractName(overrides?: CallOverrides): Promise<BigNumber>;

    getMcdJug(overrides?: CallOverrides): Promise<BigNumber>;

    getProxyActions(overrides?: CallOverrides): Promise<BigNumber>;

    openLockETHAndDraw(
      value: BigNumberish,
      ethJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openLockGemAndDraw(
      gemJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      wadC: BigNumberish,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    postProcess(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeLockETH(
      value: BigNumberish,
      ethJoin: string,
      cdp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeLockGem(
      gemJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stack(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    wipe(
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wipeAll(
      daiJoin: string,
      cdp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CHAIN_LOG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DAI_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NATIVE_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROXY_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cache(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    draw(
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freeETH(
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freeGem(
      gemJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCdpManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMcdJug(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProxyActions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openLockETHAndDraw(
      value: BigNumberish,
      ethJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openLockGemAndDraw(
      gemJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      wadC: BigNumberish,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    postProcess(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeLockETH(
      value: BigNumberish,
      ethJoin: string,
      cdp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeLockGem(
      gemJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stack(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wipe(
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wipeAll(
      daiJoin: string,
      cdp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
